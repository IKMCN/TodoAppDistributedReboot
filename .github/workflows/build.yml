name: CI (build + unit + newman@localhost)

on:
  push:
    branches: [ main, feature/** ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    # Postgres for the API to use
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: todoapp_ci
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      API_PROJ: ToDoApplication/TodoAPI/TodoAPI.csproj
      TEST_PROJ: ToDoApplication/Todo.UnitTests/Todo.UnitTests.csproj
      ASPNETCORE_URLS: http://0.0.0.0:5050

    steps:
      - uses: actions/checkout@v4

      - name: Show tree (debug paths)
        run: |
          pwd
          ls -la
          ls -la ToDoApplication || true
          ls -la ToDoApplication/TodoAPI || true
          ls -la ToDoApplication/Todo.UnitTests || true
          ls -la postman || true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # Restore + build
      - name: Restore
        run: |
          dotnet restore "$API_PROJ"
          dotnet restore "$TEST_PROJ"

      - name: Build
        run: |
          dotnet build "$API_PROJ" --configuration Release --no-restore
          dotnet build "$TEST_PROJ" --configuration Release --no-restore

      # Unit tests (skip DB-tagged tests to keep CI fast)
      - name: Test (unit only)
        run: >
          dotnet test "$TEST_PROJ"
          --configuration Release
          --no-build
          --logger "trx;LogFileName=test_results.trx"
          --results-directory TestResults
          --collect "XPlat Code Coverage"
          --filter "Category!=Integration"

      - name: Upload unit test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: TestResults/**

      # ---- Prepare DB schema for the API (adjust to your real schema) ----
      - name: Create schema
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          PGPASSWORD=postgres psql -h localhost -U postgres -d todoapp_ci -v ON_ERROR_STOP=1 -c "
            CREATE TABLE IF NOT EXISTS todos(
              id SERIAL PRIMARY KEY,
              taskdescription TEXT NOT NULL
            );"

      # ---- Start API on http://localhost:5050 ----
      - name: Start API
        env:
          # ⚠️ Match the key your app reads from appsettings.json
          # If your key is ConnectionStrings:DefaultConnection, use double-underscore:
          ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=todoapp_ci;Username=postgres;Password=postgres"
          ASPNETCORE_URLS: ${{ env.ASPNETCORE_URLS }}
        run: |
          dotnet run --project "$API_PROJ" --configuration Release &
          echo $! > api.pid

      - name: Wait for API
        run: |
          for i in {1..40}; do
            if curl -fsS http://localhost:5050/swagger/index.html >/dev/null 2>&1 || \
               curl -fsS http://localhost:5050/ >/dev/null 2>&1; then
              echo "API is up"; exit 0
            fi
            echo "Waiting for API... ($i)"; sleep 2
          done
          echo "API did not start in time"; exit 1

      # ---- Newman vs localhost:5050 ----
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install newman
        run: npm i -g newman

      - name: Ensure results dir
        run: mkdir -p TestResults

      - name: Run Postman (Newman) vs localhost
        run: |
          newman run postman/todos.postman_collection.json \
            --env-var baseUrl=http://localhost:5050 \
            --reporters cli,junit \
            --reporter-junit-export TestResults/newman.xml

      - name: Upload Newman report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: newman-report
          path: TestResults/newman.xml

      # (optional) publish your API bundle like before
      - name: Publish (framework-dependent)
        working-directory: ToDoApplication/TodoAPI
        run: dotnet publish -c Release -o ../../artifacts/TodoAPI

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: todoapi-publish
          path: artifacts/TodoAPI/**
          if-no-files-found: error
          retention-days: 7

      - name: Stop API
        if: always()
        run: |
          if [ -f api.pid ]; then kill -9 $(cat api.pid) || true; fi
